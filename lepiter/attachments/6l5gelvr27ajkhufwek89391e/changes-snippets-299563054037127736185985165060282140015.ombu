OmEntry {
	#tags : {
		#author : 'GlamorousAuthor',
		#time : DateAndTime [ '2025-04-21T09:33:00.000000+02:00' ],
		#prior : OmReference [ '0' ],
		#self : OmReference [ '1' ]
	},
	#content : EpMethodModification {
		#oldMethod : RGMethodDefinition {
			#annotations : IdentityDictionary {
				#className : #GtLscInstancesCanvasElement,
				#isMetaSide : false
			},
			#name : #subscribeToLscViewModel,
			#protocol : #'api - lsc view model',
			#sourceCode : 'subscribeToLscViewModel\r\t"Is sent after a new Lsc view model is assigned to the element.\r\tIt is required to unsubscribe from the view model or domain model by implementing\r\t#unsubscribeFromLscViewModel if elements subscribe to them"\r\t\r\tself lscViewModel weak\r\t\twhen: GtLscInstanceViewModelAdded\r\t\t\tsend: #onInstanceAdded:\r\t\t\tto: self.\r\tself lscViewModel weak\r\t\twhen: GtLscInstanceViewModelRemoved\r\t\t\tsend: #onInstanceRemoved:\r\t\t\tto: self',
			#stamp : '',
			#package : #Gt4Lsc
		},
		#newMethod : RGMethodDefinition {
			#annotations : IdentityDictionary {
				#className : #GtLscInstancesCanvasElement,
				#isMetaSide : false
			},
			#name : #subscribeToLscViewModel,
			#protocol : #'api - lsc view model',
			#sourceCode : 'subscribeToLscViewModel\r\t"Is sent after a new Lsc view model is assigned to the element.\r\tIt is required to unsubscribe from the view model or domain model by implementing\r\t#unsubscribeFromLscViewModel if elements subscribe to them"\r\t\r\tself lscViewModel weak\r\t\twhen: GtLscInstanceViewModelAdded\r\t\t\tsend: #onInstanceAdded:\r\t\t\tto: self.\r\tself lscViewModel weak\r\t\twhen: GtLscInstanceViewModelRemoved\r\t\t\tsend: #onInstanceRemoved:\r\t\t\tto: self.\r\tself lscViewModel weak\r\t\twhen: GtLscInstanceViewModelMoved\r\t\t\tsend: #onInstanceMoved:\r\t\t\tto: self.',
			#stamp : '',
			#package : #Gt4Lsc
		},
		#classPackageName : #Gt4Lsc
	}
}OmEntry {
	#tags : {
		#author : 'GlamorousAuthor',
		#time : DateAndTime [ '2025-04-21T09:33:00.000000+02:00' ],
		#prior : OmReference [ '1' ],
		#self : OmReference [ '2' ]
	},
	#content : EpMethodAddition {
		#method : RGMethodDefinition {
			#annotations : IdentityDictionary {
				#className : #GtLscInstancesCanvasElement,
				#isMetaSide : false
			},
			#name : #'onInstanceMoved:',
			#protocol : #'events handling',
			#sourceCode : 'onInstanceMoved: aGtLscInstanceViewModelMoved\r\t"Is sent when a new Lsc instance view model is moved to a position in lsc view model"\r\r\t"Move a lsc instance element to a position"\r\r\tself\r\t\tmoveInstanceElementFor: aGtLscInstanceViewModelMoved lscInstanceViewModel\r\t\ttoPosition: aGtLscInstanceViewModelMoved position',
			#stamp : '',
			#package : #Gt4Lsc
		}
	}
}OmEntry {
	#tags : {
		#author : 'GlamorousAuthor',
		#time : DateAndTime [ '2025-04-21T09:33:00.000000+02:00' ],
		#prior : OmReference [ '2' ],
		#self : OmReference [ '3' ]
	},
	#content : EpMethodAddition {
		#method : RGMethodDefinition {
			#annotations : IdentityDictionary {
				#className : #GtLscInstancesCanvasElement,
				#isMetaSide : false
			},
			#name : #'moveInstanceElementFor:toPosition:',
			#protocol : #'api - lsc view model',
			#sourceCode : 'moveInstanceElementFor: aLscInstanceViewModel toPosition: anInteger\r\tself\r\t\tchildNamed: aLscInstanceViewModel elementId\r\t\tifFound: [ :aLscInstanceElement |\r\t\t\taLscInstanceElement removeFromParent.\r\t\t\tself addChild: aLscInstanceElement at: anInteger ]\r\t\tifNone: [ "do nothing, no need to raise an exception" ]',
			#stamp : '',
			#package : #Gt4Lsc
		}
	}
}